/* golden */
/* 2/11/2018 */

#ifndef _RPCASM_H
#define _RPCASM_H

// compile rpcldr.s and rpcstub.s with NASM

#define RPCLDR_MAGIC 0x52444C52

struct rpcldr_header {
	uint32_t magic;
	uint64_t entry;
	// int (*scePthreadCreate)(ScePthread *thread, const ScePthreadAttr *attr, void *(*entry)(void *), void *arg, const char *name);
	uint64_t scePthreadCreate;
	uint64_t rpcstub;
	uint64_t thread;
} __attribute__((packed));

#define RPCSTUB_MAGIC 0x42545352

struct rpcstub_header {
	uint32_t magic;
	uint64_t entry;
	// int (*sceKernelUsleep)(unsigned int microseconds);
	uint64_t sceKernelUsleep;
	uint64_t rpc_rip;
	uint64_t rpc_rdi;
	uint64_t rpc_rsi;
	uint64_t rpc_rdx;
	uint64_t rpc_rcx;
	uint64_t rpc_r8;
	uint64_t rpc_r9;
	uint64_t rpc_rax;
	uint8_t rpc_go;
	uint8_t rpc_done;
} __attribute__((packed));

const uint8_t rpcldr[92] = {
	0x52, 0x4C, 0x44, 0x52, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x55, 0x48, 0x89, 0xE5, 0x41, 0x57, 0x4C, 0x8B, 0x3D, 0xE3, 0xFF, 0xFF,
	0xFF, 0x49, 0x8B, 0x57, 0x08, 0x4C, 0x01, 0xFA, 0x41, 0xB8, 0x00, 0x00,
	0x00, 0x00, 0xB9, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 0x00,
	0x48, 0x8D, 0x3D, 0xCD, 0xFF, 0xFF, 0xFF, 0xFF, 0x15, 0xB7, 0xFF, 0xFF,
	0xFF, 0x4C, 0x89, 0xF8, 0x41, 0x5F, 0x5D, 0xC3
};

const uint8_t rpcstub[180] = {
	0x52, 0x53, 0x54, 0x42, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x80, 0x3D, 0xF7, 0xFF, 0xFF, 0xFF, 0x00, 0x74, 0x45, 0x4C,
	0x8B, 0x0D, 0xDE, 0xFF, 0xFF, 0xFF, 0x4C, 0x8B, 0x05, 0xCF, 0xFF, 0xFF,
	0xFF, 0x48, 0x8B, 0x0D, 0xC0, 0xFF, 0xFF, 0xFF, 0x48, 0x8B, 0x15, 0xB1,
	0xFF, 0xFF, 0xFF, 0x48, 0x8B, 0x35, 0xA2, 0xFF, 0xFF, 0xFF, 0x48, 0x8B,
	0x3D, 0x93, 0xFF, 0xFF, 0xFF, 0xFF, 0x15, 0x85, 0xFF, 0xFF, 0xFF, 0x48,
	0x89, 0x05, 0xB6, 0xFF, 0xFF, 0xFF, 0xC6, 0x05, 0xB7, 0xFF, 0xFF, 0xFF,
	0x00, 0xC6, 0x05, 0xB1, 0xFF, 0xFF, 0xFF, 0x01, 0xBF, 0x00, 0x80, 0x00,
	0x00, 0xFF, 0x15, 0x5D, 0xFF, 0xFF, 0xFF, 0xEB, 0xA5, 0x31, 0xC0, 0xC3
};


#endif